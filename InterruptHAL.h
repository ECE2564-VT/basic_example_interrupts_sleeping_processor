/*
 * InterruptHAL.h
 *
 *  Created on: Mar 30, 2021
 *      Author: Matthew Zhong
 *  Supervisor: Leyla Nazhandali
 */

#ifndef INTERRUPTHAL_H_
#define INTERRUPTHAL_H_

/**
 * The HAL_Event. This enum represents all of the possible events from which
 * the microcontroller could have awoken from an ISR. You'll notice that these
 * are bitmasks like (1 << 0), (1 << 1), (1 << 2) etc, instead of the normal
 * enumerated values. We define the values in this way so that we can bitmask
 * them together. See [InterruptHAL_MostRecentEvent()] in the C file for more
 * details.
 */
enum _HAL_Event
{
    HAL_NONE                = 0,
    HAL_L1_TAPPED           = (1 << 0),
    HAL_L2_TAPPED           = (1 << 1),
    HAL_TIMER32_1_EXPIRED   = (1 << 2)
};
typedef enum _HAL_Event HAL_Event;

/** The master initialization function. Call this in your main. */
void Init_InterruptHal(void);

/* -------------------------------------------------------------------------- */
/* Light-weight LED functions. Use these instead of the old LED structs to    */
/* turn on and turn off any LEDs you need. If you need more LEDs, write more  */
/* functions for the LEDs you need.                                           */
/*                                                                            */
/* For reasons that will become readily apparent as you play with TIMER_A and */
/* read the datasheets avaiable to you, we advise you to avoid using the      */
/* Boosterpack LEDs and to stick with using just the ones on the Launchpad.   */
/* -------------------------------------------------------------------------- */
void LaunchpadLED1_TurnOn(void);
void LaunchpadLED2_TurnOn(void);

void LaunchpadLED1_TurnOff(void);
void LaunchpadLED2_TurnOff(void);

void LaunchpadLED1_Toggle(void);
void LaunchpadLED2_Toggle(void);

/** Retrieves the most recent event(s) generated by a relevant ISR. */
HAL_Event InterruptHAL_MostRecentEvent(void);

#endif /* INTERRUPTHAL_H_ */
